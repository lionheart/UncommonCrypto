//
//  EncryptionTests.swift
//  UncommonCrypto
//
//  Created by Daniel Loewenherz on 6/28/16.
//  Copyright Â© 2016 CocoaPods. All rights reserved.
//

import Foundation
import XCTest
import Nimble
@testable import UncommonCrypto

/*
struct PBKDF2TestData {
    var password: String
    var salt: String
    var rounds: Int
    var keyLength: Int

    var key: [UInt8] {
        let saltData = salt.dataUsingEncoding(NSASCIIStringEncoding)
        return try! PBKDF2SHA1.key(password: password, salt: saltData, rounds: rounds, keySize: keyLength) {
            return $0.key
        }
    }
}

let PBKDF2_TEST1: [UInt8] = [0x0c, 0x60, 0xc8, 0x0f, 0x96, 0x1f, 0x0e, 0x71, 0xf3, 0xa9, 0xb5, 0x24, 0xaf, 0x60, 0x12, 0x06, 0x2f, 0xe0, 0x37, 0xa6]
let PBKDF2_TEST2: [UInt8] = [0xea, 0x6c, 0x01, 0x4d, 0xc7, 0x2d, 0x6f, 0x8c, 0xcd, 0x1e, 0xd9, 0x2a, 0xce, 0x1d, 0x41, 0xf0, 0xd8, 0xde, 0x89, 0x57]
let PBKDF2_TEST3: [UInt8] = [0x4b, 0x00, 0x79, 0x01, 0xb7, 0x65, 0x48, 0x9a, 0xbe, 0xad, 0x49, 0xd9, 0x26, 0xf7, 0x21, 0xd0, 0x65, 0xa4, 0x29, 0xc1]
let PBKDF2_TEST4: [UInt8] = [0xee, 0xfe, 0x3d, 0x61, 0xcd, 0x4d, 0xa4, 0xe4, 0xe9, 0x94, 0x5b, 0x3d, 0x6b, 0xa2, 0x15, 0x8c, 0x26, 0x34, 0xe9, 0x84]
let PBKDF2_TEST5: [UInt8] = [0x3d, 0x2e, 0xec, 0x4f, 0xe4, 0x1c, 0x84, 0x9b, 0x80, 0xc8, 0xd8, 0x36, 0x62, 0xc0, 0xe4, 0x4a, 0x8b, 0x29, 0x1a, 0x96, 0x4c, 0xf2, 0xf0, 0x70, 0x38]
let PBKDF2_TEST6: [UInt8] = [0x56, 0xfa, 0x6a, 0xa7, 0x55, 0x48, 0x09, 0x9d, 0xcc, 0x37, 0xd7, 0xf0, 0x34, 0x25, 0xe0, 0xc3]
*/
/**
 AES ECB 128-bit Test Case

 - seealso: http://www.inconteam.com/software-development/41-encryption/55-aes-test-vectors#aes-ecb-128
 - seealso: https://github.com/krzyzanowskim/CryptoSwift/blob/master/CryptoSwiftTests/AESTests.swift
 */

class AES128EncryptionTest: XCTestCase {
    func test1() {
        let key = [0x36, 0x37, 0x39, 0x66, 0x62, 0x31, 0x64, 0x64, 0x66, 0x37, 0x64, 0x38, 0x31, 0x62, 0x65, 0x65]
        let iv = [0x6b, 0x64, 0x66, 0x36, 0x37, 0x33, 0x39, 0x38, 0x44, 0x46, 0x37, 0x33, 0x38, 0x33, 0x66, 0x64]
        let data = [0x62, 0x72, 0x61, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        print(data.convert())

        let cryptor = Cryptor<AES128>(key: key)
        let result: [UInt8] = try! cryptor.encrypt(data: data, iv: iv, mode: .ECB)
        expect(result) == [0xae,0x8c,0x59,0x95,0xb2,0x6f,0x8e,0x3d,0xb0,0x6f,0x0a,0xa5,0xfe,0xc4,0xf0,0xc2]
    }
}
